/*//////////////////////////////////////////////////////////////////////////////

Given a latitude and longitude for a location, this script generates a CSV file 
with a list of all weather files available from the NREL National Solar Radiation 
Database (NSRDB) API, and downloads the weather files that you request.

See https://developer.nrel.gov/docs/solar/nsrdb/ for API documentation. 

Instructions:
 
 1. Assign values to email and key using information from your NREL Developer
    Network account. Sign up at https://developer.nrel.gov/.

 2. Assign values to lat and lon for your location. (You can modify this 
    script to use the geocode() function to convert a place name or street 
    address to lat/lon pair.)
 
 3. Assign values to year, interval, and version according to the notes in the 
    comments below. For example, to download all years from the PSM v3 dataset 
    with 30-minute timesteps:
    year = 'all'
    interval = 30
    version = 'psm3'

Note: The NSRDB may return a file with an error message instead of weather data
if you exceed the the download rate limit or if there is a problem with the URL.

After the file downloads, add it to the solar resource library by going to the
Location and Resource page, and clicking 'Add/remove weather file folders' to
add the folder containing the file to SAM's list of weather file folders. You
should then be able to choose the file from the solar resource library.

///////////////

Note About Attributes: To choose data to include in file, add &attributes= 
to the URL with a list of data. For example the list of available attributes for
the PSM v3 dataset is listed at 
https://developer.nrel.gov/docs/solar/nsrdb/psm3-download/.

For SAM photovoltaic and concentrating solar power models, the minimum required 
attributes are:
    air_temperature, dew_point, dhi, dni, relative_humidity, surface_albedo, 
    surface_pressure, wind_speed 

When you do not specify an attribute parameter, the NSRDB returns a default set
of attributes including SAM's minimum required attributes. 

Available attributes and their names may be different for different datasets,
so be sure to check documentation.

//////////////

Written in SAM 2018.11.11, December 2018
Updated December 2019 to use https and add Puerto Rico location for testing
Updated September 2020 for new NSRDB datasets
Tested in SAM 2020.2.29 r3

//////////////////////////////////////////////////////////////////////////////*/

// NREL Developer Network credentials.
// Get a key at https://developer.nrel.gov/
email = 'sam.support@nrel.gov'; 
key = '<SAMAPIKEY>'; 

// folder to store weather files (script creates subfolder for each location).
path = homedir() + '/nsrdb_download/';

// sample locations
us_lat = 45;
us_lon = -119;

asia_lat = 91.287;
asia_lon = 23.832;

pr_lat = 18.5;
pr_lon = -66.1;

// location for download
lat = us_lat;
lon = us_lon;

// NSRDB Data Query returns a list of all available datasets for a location
base_url ='https://developer.nrel.gov/api/nsrdb/v2/solar/';
query_url = 'nsrdb-data-query?api_key=' + key + '&wkt=POINT(' + to_string(lon) + '+' + to_string(lat) + ')';
url = base_url + query_url;

// write result to file
json_str = curl( url );
write_text_file( path + '/nsrdb_data_query_result_'+to_string(lat)+'_'+to_string(lon)+'.json', json_str );
var = json_read( json_str );

if ( var.error != null )
{
	msgbox( 'NSRDB Error!\n' + var.error.message + '\n\nExiting script.' );
	exit;
}
elseif( var.outputs == [] )
{
	msgbox( 'No data available for this location!\n' + var  + '\n\nExiting script.');
	exit;
}

// parse result to create list of available versions 
if ( #var.outputs > 0 )
{
	for( i=0; i<#var.outputs; i++ )
	{
		availableVersions[i] = var.outputs[i].name;
	}
}

outln( 'Available versions = ' + availableVersions );

// parse result for list of download urls for all available files
n = 0;
for( x=0; x<#availableVersions; x++ )
{
	outln( availableVersions[x] + ':' );
	outln( '  years = ' + var.outputs[x].availableYears );
	outln( '  intervals = ' + var.outputs[x].availableIntervals );
	for( i=0; i<#var.outputs[x].links; i++ )
	{
		wf.version[n] = var.outputs[x].name;
		wf.interval[n] = var.outputs[x].links[i].interval;
		wf.year[n] = var.outputs[x].links[i].year;
		link = var.outputs[x].links[i].link;
		link = replace( link, 'yourapikey', key );
		link = replace( link, 'youremail', email );
		wf.url[n] = link;
		wf.fname[n] = path + 'nsrdb_' + var.outputs[x].name + '_' + lat + '_' + lon + '_' + var.outputs[x].links[i].interval + 'min_' + var.outputs[x].links[i].year + '.csv';
		n++;
	}
}

outln( 'Number of available files = ' + #wf.url );

// write list of URLs for all available files to CSV
mkdir( path , { 'make_full' = true });
fname = path + 'nsrdb_available_files_' + lat + '_' + lon + '.csv';
ok = csvwrite( fname, wf );
if ( !ok ) { outln( 'Failed to write file list to CSV.' ); }
else { outln( 'List of URLs written to ' + fname + '.\n'); }

// download test file to get any server error messages and then delete it
ok = curl( wf.url[0], {'file' = wf.fname[0] } );
if ( !ok ) { outln( 'Test download failed.' ); }
else
{
	txt = read_text_file( wf.fname[0] );
	if ( strpos( txt, '{\"' ) > -1 ) 
	{
		json = json_read( txt );
		outln(json);
		msgbox('Download Error!\n' + 'Message from NSRDB server: \n\n' + json.errors[0] + '\n\nExiting script.' );
		exit; 
	}
	elseif ( #txt < 500 )
	{
		msgbox( 'Download Error!\n' + 'Test file does has less than 500 characters, so does not appear to contain valid weather data.\n\nExiting script.\n\n' ); 
		exit;
	}
	remove_file( wf.fname[0] );
}


/*//////////////////////////////////////////////////////////////////////////////

Weather File Download Examples

See csv file written above for list of version, year, interval parameters.

Uncomment parameter assignments below to try downloading different types of files.

*///////////////////////////////////////////////////////////////////////////////

// hourly single year example for PSM v3
// https://developer.nrel.gov/docs/solar/nsrdb/psm3-download/
version = 'psm3';
year = '2014';
interval = 60;

// 5-minute single year example for PSM v3 - Five Minute Temporal Resolution
// https://developer.nrel.gov/docs/solar/nsrdb/psm3-5min-download/
//version = 'psm3-5min';
//year = '2019';
//interval = 5;

// tmy example for PSM v3 TMY, most recent TMY
// https://developer.nrel.gov/docs/solar/nsrdb/psm3-tmy-download/
//version = 'psm3-tmy';
//year = 'tmy';
//interval = 60;

// tmy example for PSM v3 TMY, 1998 - 2016 TMY
// https://developer.nrel.gov/docs/solar/nsrdb/psm3-tmy-download/
//version = 'psm3-tmy';
//year = 'tmy-2016';
//interval = 60;

// tgy example for PSM v3 TMY, 1998 - 2018 TGY
// https://developer.nrel.gov/docs/solar/nsrdb/psm3-tmy-download/
version = 'psm3-tmy';
year = 'all';
interval = 60;

// all years example for PSM v3
// https://developer.nrel.gov/docs/solar/nsrdb/psm3-download/
//year = 'all';
//interval = 30;
//version = 'psm3';

// download requested files
n=0;
for( i=0; i<#wf.url; i++ )
{
	if ( wf.version[i] == version && wf.interval[i] == interval )
	{
		if ( strpos( to_string(wf.year[i]), to_string(year) ) > -1 || to_string(year) == 'all' ) // mts1 uses 'tmy2' instead of 'tmy'.
		{
			outln( 'Downloading data to ' + wf.fname[i] );
			outln( wf.url[i] );
			outln();
			ok = curl( wf.url[i], {'file' = wf.fname[i] } );
			if ( !ok ) { outln( '  Download failed.' ); }
			else { n++; }
		}	
	}
}
if ( n == 0 )
{ outln( 'No files downloaded. Check that year, interval, and version parameter values are valid.' ); }
else { outln( 'Downloaded ' + n + ' file(s).' ); }
outln( 'Done.' );
browse( path );